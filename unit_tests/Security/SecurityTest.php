<?php

namespace Cougar\UnitTests\Security;

use Cougar\Security\iAuthenticationProvider;
use Cougar\Security\iAuthorizationProvider;
use Cougar\Security\Identity;
use Cougar\Security\iIdentity;
use Cougar\Security\Security;
use Cougar\Exceptions\Exception;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-10-24 at 08:56:40.
 */
class SecurityTest extends \PHPUnit_Framework_TestCase
{
    public static function setUpBeforeClass()
    {
        require_once(__DIR__ . "/../../cougar.php");
    }

    /**
     * @covers Cougar\Security\Security::getIdentity
     */
    public function testGetIdentity()
    {
        $security = new Security();

        $identity = $security->getIdentity();
        $this->assertInstanceOf("Cougar\\Security\\Identity", $identity);
        $this->assertNull($identity->id);
    }

    /**
     * @covers Cougar\Security\Security::addAuthenticationProvider
     * @covers Cougar\Security\Security::authenticate
     * @covers Cougar\Security\Security::getIdentity
     * @covers Cougar\Security\Security::isAuthenticated
     */
    public function testAddAuthenticationProvider()
    {
        $security = new Security();

        $authentication_provider = new UnitTestAuthenticationProvider("my_id");
        $security->addAuthenticationProvider($authentication_provider);

        $this->assertFalse($security->isAuthenticated());
        $security->authenticate();
        $this->assertTrue($security->isAuthenticated());

        $identity = $security->getIdentity();
        $this->assertInstanceOf("Cougar\\Security\\Identity", $identity);
        $this->assertEquals("my_id", $identity->id);
    }

    /**
     * @covers Cougar\Security\Security::addAuthenticationProvider
     * @covers Cougar\Security\Security::authenticate
     * @covers Cougar\Security\Security::getIdentity
     */
    public function testAddAuthenticationProviderUseFirst()
    {
        $security = new Security();

        $authentication_provider1 = new UnitTestAuthenticationProvider("my_id");
        $authentication_provider2 =
            new UnitTestAuthenticationProvider("bad_id");
        $security->addAuthenticationProvider($authentication_provider1);
        $security->addAuthenticationProvider($authentication_provider2);

        $this->assertFalse($security->isAuthenticated());
        $security->authenticate();
        $this->assertTrue($security->isAuthenticated());

        $identity = $security->getIdentity();
        $this->assertInstanceOf("Cougar\\Security\\Identity", $identity);
        $this->assertEquals("my_id", $identity->id);
    }

    /**
     * @covers Cougar\Security\Security::addAuthenticationProvider
     * @covers Cougar\Security\Security::authenticate
     * @covers Cougar\Security\Security::getIdentity
     */
    public function testAddAuthenticationProviderUseSecond()
    {
        $security = new Security();

        $authentication_provider1 = new UnitTestAuthenticationProvider();
        $authentication_provider2 = new UnitTestAuthenticationProvider("my_id");
        $security->addAuthenticationProvider($authentication_provider1);
        $security->addAuthenticationProvider($authentication_provider2);

        $this->assertFalse($security->isAuthenticated());
        $security->authenticate();
        $this->assertTrue($security->isAuthenticated());

        $identity = $security->getIdentity();
        $this->assertInstanceOf("Cougar\\Security\\Identity", $identity);
        $this->assertEquals("my_id", $identity->id);
    }

    /**
     * @covers Cougar\Security\Security::addAuthenticationProvider
     * @covers Cougar\Security\Security::authenticate
     * @covers Cougar\Security\Security::getIdentity
     */
    public function testAddAuthenticationProviderNoIdentity()
    {
        $security = new Security();

        $authentication_provider1 = new UnitTestAuthenticationProvider();
        $authentication_provider2 = new UnitTestAuthenticationProvider();
        $security->addAuthenticationProvider($authentication_provider1);
        $security->addAuthenticationProvider($authentication_provider2);

        $this->assertFalse($security->isAuthenticated());
        $security->authenticate();
        $this->assertFalse($security->isAuthenticated());

        $identity = $security->getIdentity();
        $this->assertInstanceOf("Cougar\\Security\\Identity", $identity);
        $this->assertNull($identity->id);
    }

    /**
     * @covers Cougar\Security\Security::addAuthenticationProvider
     * @covers Cougar\Security\Security::authenticate
     * @covers Cougar\Security\Security::authorize
     * @covers Cougar\Security\Security::addAuthorizationProvider
     */
    public function testAuthorizeNoAlias()
    {
        $security = new Security();

        $authentication_provider = new UnitTestAuthenticationProvider("my_id");
        $security->addAuthenticationProvider($authentication_provider);
        $security->authenticate();

        $authorization_provider1 =
            new UnitTestAuthorizationProviderWithNoAlias();
        $authorization_provider2 = new UnitTestAuthorizationProviderWithAlias();
        $security->addAuthorizationProvider($authorization_provider1);
        $security->addAuthorizationProvider($authorization_provider2);

        // Call first authorization provider by class name
        $results = $security->authorize(
            "UnitTestAuthorizationProviderWithNoAlias", "some query");
        $this->assertInstanceOf("Cougar\\Security\\Identity", $results[0]);
        $this->assertEquals("my_id", $results[0]->id);
        $this->assertEquals("some query", $results[1]);

        // Call the second authorization provider
        $results = $security->authorize("My provider alias", "another query");
        $this->assertInstanceOf("Cougar\\Security\\Identity", $results[0]);
        $this->assertEquals("my_id", $results[0]->id);
        $this->assertEquals("another query", $results[1]);

        // Try calling it by class name (should throw exception)
        try
        {
            $results = $security->authorize(
                "UnitTestAuthorizationProviderWithAlias", "bad query");
            $this->fail("Expected exception was not thrown");
        }
        catch (Exception $e)
        {
            $this->assertEquals("Authorization provider has not been added",
                $e->getmessage());
        }
    }

    /**
     * @covers Cougar\Security\Security::addAuthenticationProvider
     * @covers Cougar\Security\Security::authenticate
     * @covers Cougar\Security\Security::authorize
     * @covers Cougar\Security\Security::addAuthorizationProvider
     */
    public function testAuthorizeWithRuntimeAlias()
    {
        $security = new Security();

        $authentication_provider = new UnitTestAuthenticationProvider("my_id");
        $security->addAuthenticationProvider($authentication_provider);
        $security->authenticate();

        $authorization_provider1 =
            new UnitTestAuthorizationProviderWithNoAlias();
        $authorization_provider2 = new UnitTestAuthorizationProviderWithAlias();
        $security->addAuthorizationProvider($authorization_provider1, "abc");
        $security->addAuthorizationProvider($authorization_provider2, "xyz");

        // Call first authorization provider by class name
        $results = $security->authorize("abc", "some query");
        $this->assertInstanceOf("Cougar\\Security\\Identity", $results[0]);
        $this->assertEquals("my_id", $results[0]->id);
        $this->assertEquals("some query", $results[1]);

        // Call the second authorization provider
        $results = $security->authorize("xyz", "another query");
        $this->assertInstanceOf("Cougar\\Security\\Identity", $results[0]);
        $this->assertEquals("my_id", $results[0]->id);
        $this->assertEquals("another query", $results[1]);

        // Try calling by class name or providerAlias (should throw exception)
        try
        {
            $results = $security->authorize(
                "UnitTestAuthorizationProviderWithNoAlias", "bad query");
            $this->fail("Expected exception was not thrown");
        }
        catch (Exception $e)
        {
            $this->assertEquals("Authorization provider has not been added",
                $e->getmessage());
        }

        try
        {
            $results = $security->authorize(
                "UnitTestAuthorizationProviderWithAlias", "bad query");
            $this->fail("Expected exception was not thrown");
        }
        catch (Exception $e)
        {
            $this->assertEquals("Authorization provider has not been added",
                $e->getmessage());
        }
        try
        {
            $results = $security->authorize("My Provider Alias", "bad query");
            $this->fail("Expected exception was not thrown");
        }
        catch (Exception $e)
        {
            $this->assertEquals("Authorization provider has not been added",
                $e->getmessage());
        }
    }
}

require_once(__DIR__ . "/../../Cougar/Security/iAuthenticationProvider.php");
require_once(__DIR__ . "/../../Cougar/Security/iAuthorizationProvider.php");

class UnitTestAuthenticationProvider implements iAuthenticationProvider
{
    public function __construct($id = null)
    {
        $this->id = $id;
    }

    public function authenticate()
    {
        if ($this->id)
        {
            return new Identity($this->id);
        }
    }

    protected $id;
}

class UnitTestAuthorizationProviderWithNoAlias implements iAuthorizationProvider
{
    public function authorize(iIdentity $identity, $query)
    {
        return func_get_args();
    }
}

class UnitTestAuthorizationProviderWithAlias implements iAuthorizationProvider
{
    public $providerAlias = "My provider alias";

    public function authorize(iIdentity $identity, $query)
    {
        return func_get_args();
    }
}
