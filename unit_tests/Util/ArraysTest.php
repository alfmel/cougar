<?php

namespace Cougar\UnitTests\Util;

use Cougar\Util\Arrays;

require_once(__DIR__ . "/../../../cougar.php");

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-13 at 15:17:30.
 */
class ArraysTest extends \PHPUnit_Framework_TestCase {

    /**
     * @covers \Cougar\Util\Arrays::toAssociative
     */
    public function testToAssociative() {
        # Define the array
        $array = array(
            array(
                "id" => "id_1",
                "value" => "Value 1"
            ),
            array(
                "id" => "id_2",
                "value" => "Value 2"
            ),
            array(
                "id" => "id_3",
                "value" => "Value 3"
            ),
            array(
                "id" => "id_4",
                "value" => "Value 4"
            ),
            array(
                "id" => "id_5",
                "value" => "Value 5"
            )
        );
        
        # Convert the array
        $assoc_array = Arrays::toAssociative($array, "id");
        
        $this->assertCount(5, $assoc_array);
        foreach($assoc_array as $key => $value)
        {
            $this->assertEquals($key, $value["id"]);
        }
    }
    
    /**
     * @covers \Cougar\Util\Arrays::toAssociative
     */
    public function testToAssociativeWithObjects() {
        # Define the objects
        $obj1 = new \stdClass();
        $obj1->id = "id_1";
        $obj1->value = "Value 1";
        
        $obj2 = new \stdClass();
        $obj2->id = "id_2";
        $obj2->value = "Value 2";
        
        $obj3 = new \stdClass();
        $obj3->id = "id_3";
        $obj3->value = "Value 3";
        
        $obj4 = new \stdClass();
        $obj4->id = "id_4";
        $obj4->value = "Value 4";
        
        $obj5 = new \stdClass();
        $obj5->id = "id_5";
        $obj5->value = "Value 5";
        
        $array = array($obj1, $obj2, $obj3, $obj4, $obj5);
        
        # Convert the array
        $assoc_array = Arrays::toAssociative($array, "id");
        
        $this->assertCount(5, $assoc_array);
        foreach($assoc_array as $key => $value)
        {
            $this->assertEquals($key, $value->id);
        }
    }

    /**
     * @covers \Cougar\Util\Arrays::dataSort
     */
    public function testDataSort() {
        $array = array(
            array(
                "id" => 1,
                "firstName" => "Peter",
                "lastName" => "Stevens",
                "age" => 45
            ),
            array(
                "id" => 2,
                "firstName" => "John",
                "lastName" => "Stevens",
                "age" => 45
            ),
            array(
                "id" => 3,
                "firstName" => "John",
                "lastName" => "Smith",
                "age" => 45
            ),
            array(
                "id" => 4,
                "firstName" => "Mark",
                "lastName" => "Johnson",
                "age" => 58
            ),
            array(
                "id" => 5,
                "firstName" => "Michael",
                "lastName" => "Zimmerman",
                "age" => 19
            )
        );
        
        $sorted_array = Arrays::dataSort(
            $array, "age", "lastName", "firstName");
        
        $this->assertCount(5, $sorted_array);
        $this->assertEquals(5, $sorted_array[0]["id"]);
        $this->assertEquals(3, $sorted_array[1]["id"]);
        $this->assertEquals(2, $sorted_array[2]["id"]);
        $this->assertEquals(1, $sorted_array[3]["id"]);
        $this->assertEquals(4, $sorted_array[4]["id"]);
    }
    
}
